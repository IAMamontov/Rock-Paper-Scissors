type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class RPSTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = ["Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\npaper\npaper\n!rating\n!exit",
                     "Tim\nrock,paper,scissors\nrock\n!exit",
                     "Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\nrock\nrock\nrock\n!exit",
                     "Tim\n\nrock\nrock\nrock\navada_kedavra\nrock\n!exit",
                     "Tim\n1,2,3,4,5\n1\n1\n2\n3\n4\n5\n!exit"]
            return [TestCase(stdin=case, attach=case, files={'rating.txt': 'Tim 1350\nJane 200\nAlex 400'})
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:

            if "Okay" not in reply:
                return CheckResult.wrong(
                    "There is no \"Okay, let's start\" message in this test"
                )

            reply = [r for r in reply.split("\n") if len(r) != 0]
            attach = attach.split("\n")

            if len(reply) == 0:
                return CheckResult.wrong(
                    "Looks like you didn't output anything!"
                )



            rating = 1350
            self.options = (attach[1] or "rock,paper,scissors").split(",")
            for rep in range(len(reply)):
                reply_part = reply[rep]
                try:
                    attach_part = attach[rep]
                    if attach_part == "!exit" or \
                            "Hello" in reply_part or \
                            "Okay" in reply_part or "Bye!" in reply_part:
                        continue
                    if attach_part == "!rating":
                        if reply_part.split(":")[-1].strip() != str(rating):
                            return CheckResult.wrong("User rating is wrong :(")
                        continue
                    elif "Sorry" in reply_part:
                        result = -1
                        option = reply_part.split()[-1]
                    elif "draw" in reply_part:
                        result = 0
                        if '(' not in reply_part or ')' not in reply_part:
                            return CheckResult.wrong(
                                "There are no '(' or ')' character when there is a draw"
                            )
                        start = reply_part.index('(')
                        end = reply_part.index(')')
                        option = reply_part[start + 1: end]
                        rating += 50
                    elif "Well" in reply_part:
                        result = 1
                        option = reply_part.split()[-3]
                        rating += 100
                    elif "Invalid input" in reply_part:
                        result = 2
                        if attach_part in self.options:
                            return CheckResult.wrong(
                                'Looks like you output "Invalid input" '
                                'in the wrong place'
                            )
                    else:
                        raise IndexError

                    if attach_part not in self.options:
                        if result == 2:
                            res = True
                        else:
                            return CheckResult.wrong(
                                "Looks like you didn't handle an invalid input correctly"
                            )
                    else:
                        res = self.solve(result, attach_part.strip(), option.strip())

                    if res is False:
                        return CheckResult.wrong(
                            "You chose " + attach_part + ", "
                            "computer chose " + option + '. '
                            'And the answer was \"' + reply_part + '\". '
                            'That\'s wrong reply'
                        )

                    if res < 0:
                        raise IndexError
                except IndexError:
                    return CheckResult.wrong("Seems like your answer (\"{}\") does not fit in given templates".format(reply_part))
            return CheckResult.correct()

        def solve(self, result, *options):
            if any(opt not in self.options for opt in options):
                return -1
            diff = self.options.index(options[0]) - self.options.index(options[1])
            if not diff:
                true_result = 0
            else:
                true_result = (-1) ** ((abs(diff) - (len(self.options) // 2) > 0) == (diff > 0))
            return true_result == result

    if __name__ == '__main__':
        RPSTest("rps.game").run_tests()
  learner_created: false
- name: rps/rating.txt
  visible: true
  text: |
    Tim 50
  learner_created: true
- name: rps/game.py
  visible: true
  text: |
    # Write your code here
    import random

    def write_rating(cur_name, cur_score):
        if cur_name in rating:
            rating[cur_name] = int(rating[cur_name]) + cur_score
        else:
            rating[cur_name] = cur_score


    rating = {}
    items = ["rock", "scissors", "paper"]
    win = dict(scissors="rock", paper="scissors", rock="paper")
    draw = dict(scissors="scissors", paper="paper", rock="rock")
    lose = dict(scissors="paper", paper="rock", rock="scissors")
    computers_choice = random.choice(items)
    lose_string = "Sorry, but computer chose {}".format(computers_choice)
    draw_string = "There is a draw ({})".format(computers_choice)
    win_string = "Well done. Computer chose {} and failed".format(computers_choice)

    print("Enter your name: ", end="")
    users_name = input()
    print("Hello, {}".format(users_name))
    rating_file = open("rating.txt", "r+")
    for s in rating_file:
        name, score = s.split()
        rating[name] = int(score)
    rating_file.close()
    #print(rating)
    users_choice = input()
    while not users_choice == "!exit":
        if users_choice in items:
            if users_choice == win[computers_choice]:
                print(win_string)
                write_rating(users_name, 100)
            elif users_choice == draw[computers_choice]:
                print(draw_string)
                write_rating(users_name, 50)
            elif users_choice == lose[computers_choice]:
                print(lose_string)
        elif users_choice == "!rating":
            print("Your rating: ", end="")
            if users_name in rating:
                print(rating[users_name])
            else:
                print("0")
        else:
            print("Invalid input")
        users_choice = input()
    rating_file = open("rating.txt", "w")
    for s in rating:
        print(s, rating[s], file=rating_file)
    rating_file.close()
    print("Bye!")
  learner_created: true
feedback_link: https://hyperskill.org/projects/78/stages/435/implement
status: Solved
record: 5
